package memstream;

import static com.maxeler.maxcompiler.v2.managers.standard.Manager.link;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.standard.IOLink.IODestination;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;

public class MemStreamManager {

	private static final String s_kernelName = "MemStreamKernel";

	public static void main(String[] args) {

		MemStreamEngineParameters params = new MemStreamEngineParameters(args);
		Manager manager = new Manager(params);
		Kernel kernel   = new MemStreamKernel(manager.makeKernelParameters(s_kernelName));

		manager.setKernel(kernel);
		manager.setIO(link("r", IODestination.CPU));

		manager.createSLiCinterface(interfaceDefault());

		configBuild(manager, params);

		manager.build();
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes type = CPUTypes.DOUBLE;

		int size = type.sizeInBytes();

		InterfaceParam a = engine_interface.addParam("a", type);
		InterfaceParam b = engine_interface.addParam("b", type);

		engine_interface.setScalar(s_kernelName, "a", a);
		engine_interface.setScalar(s_kernelName, "b", b);

		InterfaceParam N = engine_interface.addParam("max", CPUTypes.UINT64);
		engine_interface.setTicks(s_kernelName, N);
		engine_interface.setStream("r", type, N * size);
		return engine_interface;
	}

	private static void configBuild(Manager manager, MemStreamEngineParameters params) {
		manager.setEnableStreamStatusBlocks(false);
		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}
}
